function is_lower_case(s) { return(s.toLowerCase() === s)}
function is_upper_case(s) { return(s.toUpperCase() === s)}

function upper_initial_and_lower_left(s) { 
    return(s[0].toUpperCase()+s.substr(1).toLowerCase())
}

function upper_initial(s) {return(s[0].toUpperCase()+s.substr(1))}


function lower_initial(s) {return(s[0].toLowerCase()+s.substr(1))}


function split_lsnake(s) {return(s.split('_'))}

function lsnake_to_lcamel(s) {
    let arr = split_lsnake(s);
    let narr = arr.slice(1).map(r=>upper_initial_and_lower_left(r));
    narr.unshift(arr[0]);
    return(narr.join(""));
}

function lsnake_to_bcamel(s) {
    let arr = split_lsnake(s);
    arr = arr.map(r=>upper_initial_and_lower_left(r));
    return(arr.join(""));
}

function lsnake_to_ldash(s) {return(s.replace(/_/g,'-'))}

function split_lcamel(s) {
    s = upper_initial(s);
    let arr = split_bcamel(s);
    arr[0] = lower_initial(arr[0]);
    return(arr);
}

function lcamel_to_lsnake(s) {
    let arr = split_lcamel(s);
    arr = arr.map(r=>r.toLowerCase());
    return(arr.join("_"));
}

function lcamel_to_bcamel(s) {return(upper_initial(s))}

function lcamel_to_ldash(s) {return(lsnake_to_ldash(lcamel_to_lsnake(s)))}

function split_bcamel(s) {
    let arr = []
    let cache = ""
    for(let i=0;i<s.length;i++) {
        let cond = is_upper_case(s[i]);
        if(cond) {
            if(cache !== "") {
                arr.push(cache);
            }
            cache = s[i];
        } else {
            cache = cache + s[i];
        }
    }
    if(cache !== "") {arr.push(cache)}
    return(arr)
}

function bcamel_to_lsnake(s) {
    let arr = split_bcamel(s);
    arr = arr.map(r=>r.toLowerCase());
    return(arr.join("_"));
}

function bcamel_to_lcamel(s){return(lower_initial(s))}

function bcamel_to_ldash(s) {return(lcamel_to_ldash(bcamel_to_lcamel(s)))}


function split_ldash(s) {return(s.split("-"))} 

function ldash_to_lsnake(s) {return(s.replace(/\-/g,"_"))}

function ldash_to_lcamel(s) {return(lsnake_to_lcamel(ldash_to_lsnake(s)))}

function ldash_to_bcamel(s) {return(lsnake_to_bcamel(ldash_to_lsnake(s)))}


function builtinize(s) { return("__"+s+"__")}

function pre_privatize(s) {return("_"+s)}

function post_privatize(s) {return(s+"_")}


function streamize(s) {return(s+"$")}

function jquerize(s) {return("$"+s)}

function globalize(s) {
    s = ldash_to_lsnake(s);
    s = lsnake_to_bcamel(s);
    return(bcamel_to_lsnake(s).toUpperCase())
}


function rename(fc,name){Object.defineProperty(fc,"name",{value:name})}
function rename_cls(Cls,name) {Object.defineProperty(Cls,"name",{value:upper_initial_and_lower_left(name)})}
function rename_prototype(Cls,oldname,newname) {
    let method = Cls.prototype[oldname]
    delete Cls.prototype[oldname]
    Cls.prototype[newname] = method
}
function del_clsname(Cls) {Object.defineProperty(Cls,"name",{value:''})}
function rename_clstag(Cls,getter) {
    Object.defineProperty(
        Cls.prototype,
        Symbol.toStringTag,
        {get:getter}
    )
}

module.exports = {
    is_lower_case,
    is_upper_case,
    upper_initial_and_lower_left,
    upper_initial,
    lower_initial,
    split_lsnake,
    lsnake_to_lcamel,
    lsnake_to_bcamel, 
    lsnake_to_ldash,
    split_lcamel,
    lcamel_to_lsnake,
    lcamel_to_bcamel,
    lcamel_to_ldash, 
    split_bcamel,
    bcamel_to_lsnake,
    bcamel_to_lcamel,
    bcamel_to_ldash,
    split_ldash,
    ldash_to_lsnake,
    ldash_to_lcamel,
    ldash_to_bcamel, 
    builtinize,
    pre_privatize,
    post_privatize,
    streamize,
    jquerize,
    globalize,
    rename,
    rename_cls,
    del_clsname,
    rename_clstag,
    rename_prototype,
}
