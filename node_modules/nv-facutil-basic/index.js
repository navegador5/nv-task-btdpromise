
let Node_Util;

function is_node() {
    try {
        Node_Util = require("util");
        if(Node_Util.inspect.custom !== undefined && typeof(Node_Util.inspect.custom)==='symbol') {
            return(true);
        } else {
            return(false);
        }
    } catch(err) {
        return(false)
    }

}

function add_repr(cls,repr,...other_args) {
    let cond = is_node()
    if(cond) {
        cls.prototype[Node_Util.inspect.custom] = function () {return(repr(this,...other_args))}
    } else {
        cls.prototype.repr = function () {return(repr(this,...other_args))}
    }
}


function optional_chaining(o,...keys) {
    for(let i=0;i<keys.length;i++) {
        o = o[keys[i]]
        if(o === undefined) {break;}
    }
    return(o)
}


function nullish(condv,v) {
    let cond = (condv===null) || (condv === undefined)
    if(cond){
        return(v)
    } else {
        return(condv)
    }
}


function nc(a,b) {
    if(is_nullish(a)) {
        return(b)
    } else {
        return(a)
    }
}


function creat_reserved(...kvs) {
    class Cls {
        #name 
        constructor(name,value){this.#name = name}
        [util.inspect.custom](){return(this.#name)}
    }
    kvs.forEach(
        (r) => {
            const inst = (r.length===1)?new Cls(r[0]):r[1];
            Object.defineProperty(
                global,
                r[0],
                {
                  value: inst,
                  writable: false,
                  enumerable: false,
                  configurable: false
                }
            );
        }
    )
}


function is_null(o) {return(o===null)}

function is_undefined(o) {return(o===undefined)}

function is_nullish(o) {return(o===null || o===undefined)}



function _creat_nullptr() {
    let nullptr = Object.create(null);
    Object.freeze(nullptr);
    return(nullptr)
}

function _creat_none() {
    class _None {}
    Object.defineProperty(_None,"name",{value:"None"});
    let none = new _None()
    Object.freeze(none);
    return(none)
}

class Nil {}

const nfunc = ()=>{}

const None = _creat_none();
const nil = _creat_nullptr();
const nullptr = _creat_nullptr();
const NULL = _creat_nullptr();

const  empty = Symbol("empty");
const  unknown = Symbol("unknown");
const  impossible = Symbol("impossible");
const  maybe = Symbol("maybe");
const  NUL = "\u0000";

const ZWNJ = "\u200c"
const ZWJ = "\u200d"
const BOM = "\ufeff"

const NBSP = "\u00a0"
const LS = "\u2028"
const PS = "\u2029"

module.exports = {
    optional_chaining,
    nullish,
    nc,
    is_null,
    is_undefined,
    ////
    is_node,
    add_repr,
    creat_reserved,
    ////
    Nil,
    nfunc,
    None,
    nil,
    nullptr,
    NULL,
    empty,
    unknown,
    impossible,
    maybe,
    NUL,
    NBSP,
    LS,
    PS,
    ZWNJ,
    ZWJ,
    BOM
}


function creat_guid() {
    return(
        'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(
            /[xy]/g,
            function(c) {
                let r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8)
                return(v.toString(16))
            }
         )
    )
}

try {
    const {v4} = require("uuid");
    module.exports["creat_id"] = v4;
    module.exports.creat_uuid = v4;
} catch(err) {
    module.exports["creat_id"] = creat_guid
}

module.exports.creat_guid = creat_guid;
module.exports.get_abbr = (id)=>id.substr(0,8)
